Spring Bean Lifecycle

Instantiate - The class gets called, dependencies will get called
Populate Properties - ie data source will have username and password
Call setBeanName of BeanNameAware -
Call setBeanFactory of BeanFactoryAware -
Call setApplicationContext of ApplicationContextAware -
Preinitialize (Bean PostProcessors) -
afterPropertiesSet of Initializing Beans -
Custom Init Method -
Post Initialization (BeanPostProcessors) -
Bean Ready to Use

Container Shutdown
Disposable Bean's destroy()
Call Custom Destory Method
Bean is Terminated


Callback Interfaces
Spring has 2 interfaces you can implement for call back events
InitializingBean.afterPropertiesSet()
  - Called after properties are set
DisposableBean.destroy()
  - Called during bean destruction in shutdown

Life Cycle Annotations
Spring has 2 annotations you can use to hook into the bean life cycle
@PostConstruct annotated methods will be called after the bean has been constructed,
but before its returned to the requesting object
@PreDestroy is called just before the bean is destroyed by the container

Bean Post Processors
Gives you a means to tap into the Spring context life cycle and interact with
beans as they are processed
Implement interfaces BeanPostProcessor
 - postProcessBeforeInitialization - called before bean initialization method
 - postProcessAfterInitialization - called after bean initialization

'Aware' Interfaces
Spring has 14 'Aware' Interfaces
These are used to access the SpringFramework
Almost never used by programmers